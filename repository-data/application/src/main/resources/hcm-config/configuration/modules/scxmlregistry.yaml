definitions:
  config:
    /hippo:configuration/hippo:modules/scxmlregistry/hippo:moduleconfig/hipposcxml:definitions/documentworkflow:
      hipposcxml:source: "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!--\r\n\
        \  Copyright 2013-2017 Hippo B.V. (http://www.onehippo.com)\r\n\r\n  Licensed\
        \ under the Apache License, Version 2.0 (the \"License\");\r\n  you may not\
        \ use this file except in compliance with the License.\r\n  You may obtain\
        \ a copy of the License at\r\n\r\n          http://www.apache.org/licenses/LICENSE-2.0\r\
        \n\r\n  Unless required by applicable law or agreed to in writing, software\r\
        \n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n\
        \  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\
        \n  See the License for the specific language governing permissions and\r\n\
        \  limitations under the License.\r\n  -->\r\n<scxml version=\"1.0\"\r\n \
        \      xmlns=\"http://www.w3.org/2005/07/scxml\"\r\n       xmlns:hippo=\"\
        http://www.onehippo.org/cms7/repository/scxml\"\r\n       xmlns:cs=\"http://commons.apache.org/scxml\"\
        >\r\n\r\n  <script>\r\n    def getScxmlId() { workflowContext.scxmlId }\r\n\
        \    // draft variant property method\r\n    def getDraft() { workflowData.documents['draft']\
        \ }\r\n    // unpublished variant property method\r\n    def getUnpublished()\
        \ { workflowData.documents['unpublished'] }\r\n    // published variant property\
        \ method\r\n    def getPublished() { workflowData.documents['published'] }\r\
        \n    // current user property method\r\n    def getUser() { workflowContext.user\
        \ }\r\n    // current requests map property method\r\n    def getRequests()\
        \ { workflowData.requests }\r\n    // returns the variant for copying and\
        \ checking copy access privileges\r\n    def getCopySource() { published ?:\
        \ unpublished ?: null }\r\n    // returns the variant for deleting and checking\
        \ delete privileges\r\n    def getDeleteSource() { unpublished ?: published\
        \ ?: draft }\r\n    // returns the current draft holder (editor) if defined\
        \ (and draft exists)\r\n    def getHolder() { draft?.holder }\r\n    // true\
        \ if draft exists and currently being edited\r\n    def boolean isEditing()\
        \ { !!holder }\r\n    // true if draft exists and edited by current user\r\
        \n    def boolean isEditor() { holder == user }\r\n    // true if draft exists\
        \ and not currently editor or edited by current user\r\n    def boolean isEditable()\
        \ { !holder or editor }\r\n    // true if published variant exists with availability\
        \ 'live'\r\n    def boolean isLive() { published?.isAvailable('live') }\r\n\
        \    // true if unpublished variant exists with availability 'preview'\r\n\
        \    def boolean isPreview() { unpublished?.isAvailable('preview') }\r\n \
        \   // true if either unpublished or published variant exits with availability\
        \ 'preview'\r\n    def boolean isPreviewAvailable() { unpublished?.isAvailable('preview')\
        \ or published?.isAvailable('preview') }\r\n    // true if unpublished variant\
        \ exists and no published variant exists with availability 'live'\r\n    //\
        \                                        or they have a different lastModified\r\
        \n    def boolean isModified() { unpublished and (!live or unpublished.lastModified!=published.lastModified)\
        \ }\r\n    // true if there is an outstanding workflow request\r\n    def\
        \ boolean isRequestPending() { workflowData.requestPending }\r\n    def getContainingFolder()\
        \ { workflowData.handle.parent }\r\n  </script>\r\n\r\n  <!-- the initial\
        \ no-document state is used to prevent entering the handle state if there\
        \ is no document -->\r\n  <state id=\"no-document\">\r\n    <!-- automatic\
        \ transition to and continue in parallel handle state only when a document\
        \ variant exists -->\r\n    <transition target=\"handle\" cond=\"!workflowData.documents.isEmpty()\"\
        />\r\n  </state>\r\n\r\n  <parallel id=\"handle\">\r\n\r\n    <!-- the atomic\
        \ status state is used to report several statuses and info feedback to the\
        \ invoking workflow -->\r\n    <state id=\"status\">\r\n      <onentry>\r\n\
        \        <hippo:feedback key=\"status\" value=\"editable\"/>\r\n        <hippo:feedback\
        \ key=\"isLive\" value=\"live\"/>\r\n        <hippo:feedback key=\"previewAvailable\"\
        \ value=\"previewAvailable\"/>\r\n        <!-- enable the checkModified operation\
        \ if both draft and unpublished variants exists -->\r\n        <hippo:action\
        \ action=\"checkModified\" enabledExpr=\"draft and unpublished\"/>\r\n   \
        \   </onentry>\r\n\r\n      <!-- target-less transition on event checkModified\
        \ to compare the draft and unpublished variants which result is\r\n      \
        \     reported back as Boolean value through the 'modified' feedback variable\
        \ and the workflow operation result -->\r\n      <transition event=\"checkModified\"\
        >\r\n        <hippo:isModified/>\r\n        <hippo:result value=\"workflowContext.feedback['modified']\"\
        />\r\n      </transition>\r\n    </state>\r\n\r\n    <!-- the composite edit\
        \ state is used to manage all operations for editing a draft variant -->\r\
        \n    <state id=\"edit\">\r\n\r\n      <!-- default no-edit state initially\
        \ disables all editing operations -->\r\n      <state id=\"no-edit\">\r\n\
        \        <onentry>\r\n          <hippo:action action=\"disposeEditableInstance\"\
        \ enabledExpr=\"false\"/>\r\n          <hippo:action action=\"obtainEditableInstance\"\
        \ enabledExpr=\"false\"/>\r\n          <hippo:action action=\"commitEditableInstance\"\
        \ enabledExpr=\"false\"/>\r\n        </onentry>\r\n        <!-- event-less\
        \ transition to state \"editing\" if there is no pending request and the draft\
        \ variant is edited -->\r\n        <transition target=\"editing\"  cond=\"\
        !requestPending and editing\"/>\r\n        <!-- (else) event-less transition\
        \ to state \"editable\" if there is no pending request and the draft variant\r\
        \n                    doesn't exist yet or isn't edited -->\r\n        <transition\
        \ target=\"editable\" cond=\"!requestPending\"/>\r\n      </state>\r\n\r\n\
        \      <!-- editing state becomes active when the draft variant is currently\
        \ edited -->\r\n      <state id=\"editing\">\r\n        <onentry>\r\n    \
        \      <if cond=\"editor\">\r\n            <!-- current editor is allowed\
        \ all editing operations -->\r\n            <hippo:action action=\"disposeEditableInstance\"\
        \ enabledExpr=\"true\"/>\r\n            <hippo:action action=\"obtainEditableInstance\"\
        \ enabledExpr=\"true\"/>\r\n            <hippo:action action=\"commitEditableInstance\"\
        \ enabledExpr=\"true\"/>\r\n          <else/>\r\n            <!-- for a not-current\
        \ editor the current editor (holder) is reported through the 'inUseBy' feedback\
        \ -->\r\n            <hippo:feedback key=\"inUseBy\" value=\"holder\"/>\r\n\
        \          </if>\r\n          <if cond=\"!editor and workflowContext.isGranted(draft,'hippo:unlocker')\"\
        >\r\n            <!-- For an unlocker (granted hippo:unlocker) enable the\
        \ unlock operation if not-current editor -->\r\n            <hippo:action\
        \ action=\"unlock\" enabledExpr=\"true\"/>\r\n          </if>\r\n        </onentry>\r\
        \n      </state>\r\n\r\n      <!-- editable state becomes active if editing\
        \ is possible but there is no current editor -->\r\n      <state id=\"editable\"\
        >\r\n        <onentry>\r\n          <if cond=\"workflowContext.isGranted(draft,'hippo:unlocker')\"\
        >\r\n            <!-- for an unlocker (granted hippo:unlocker) report the\
        \ unlock operation as available but disabled -->\r\n            <hippo:action\
        \ action=\"unlock\" enabledExpr=\"false\"/>\r\n          </if>\r\n       \
        \   <!-- enable the operation to start editing -->\r\n          <hippo:action\
        \ action=\"obtainEditableInstance\" enabledExpr=\"true\"/>\r\n        </onentry>\r\
        \n      </state>\r\n\r\n      <!-- target-less transition to 'dispose' an\
        \ editable instance by (only) removing the current draft holder, and the\r\
        \n           current unpublished document variant is returned if currently\
        \ in preview state else the published variant -->\r\n      <transition event=\"\
        disposeEditableInstance\">\r\n        <!-- remove holder from the draft document\
        \ -->\r\n        <hippo:setHolder holder=\"null\"/>\r\n        <hippo:result\
        \ value=\"preview ? unpublished : published\"/>\r\n      </transition>\r\n\
        \r\n      <!-- target-less transition to 'obtain' an editable draft document\
        \ variant by creating or updating a draft variant\r\n           by copying\
        \ (the contents of) the current unpublished variant if available or else the\
        \ published variant -->\r\n      <transition event=\"obtainEditableInstance\"\
        >\r\n        <!-- copy/update draft unless user already is holder (editing)\
        \ -->\r\n        <if cond=\"!editor\">\r\n          <if cond=\"!!unpublished\"\
        >\r\n            <!-- unpublished document exists: copy it to draft first,\
        \ unless we're already editor -->\r\n            <hippo:copyVariant sourceState=\"\
        unpublished\" targetState=\"draft\"/>\r\n          <elseif cond=\"!!published\"\
        />\r\n            <!-- else if published document exists: first copy it to\
        \ unpublished -->\r\n            <hippo:copyVariant sourceState=\"published\"\
        \ targetState=\"unpublished\"/>\r\n            <if cond=\"live\">\r\n    \
        \          <hippo:configVariant variant=\"published\" availabilities=\"live\"\
        />\r\n              <else/>\r\n              <hippo:configVariant variant=\"\
        published\" availabilities=\"\"/>\r\n            </if>\r\n            <hippo:configVariant\
        \ variant=\"unpublished\" versionable=\"true\" availabilities=\"preview\"\
        />\r\n            <!-- create a JCR version of the published document via\
        \ the unpublished variant -->\r\n            <hippo:version variant=\"unpublished\"\
        />\r\n            <!-- now copy the unpublished variant to draft -->\r\n \
        \           <hippo:copyVariant sourceState=\"unpublished\" targetState=\"\
        draft\"/>\r\n          </if>\r\n          <!-- mark the draft document as\
        \ modified, set the user as editor and remove possibly copied availabilities\
        \ -->\r\n          <hippo:configVariant variant=\"draft\" applyModified=\"\
        true\" setHolder=\"true\" availabilities=\"\"/>\r\n        </if>\r\n     \
        \   <!-- store the (newly created or updated) draft document as result -->\r\
        \n        <hippo:result value=\"draft\"/>\r\n      </transition>\r\n\r\n \
        \     <!-- target-less transition to 'commit' an editable instance by removing\
        \ the holder and, if new or modified,\r\n           copying its content to\
        \ the unpublished variant -->\r\n      <transition event=\"commitEditableInstance\"\
        >\r\n        <hippo:setHolder holder=\"null\"/>\r\n        <if cond=\"!!unpublished\"\
        >\r\n          <!-- if unpublished variant exist only 'commit' changes if\
        \ there are any -->\r\n          <hippo:isModified/>\r\n        </if>\r\n\
        \        <if cond=\"!unpublished or workflowContext.feedback['modified']\"\
        >\r\n          <!-- we either have a new draft (no unpublished) or the draft\
        \ is modified compared to the unpublished -->\r\n          <if cond=\"!unpublished\
        \ and !!published\">\r\n            <!-- we have no unpublished variant yet\
        \ but do have a published variant:\r\n                 remove possible 'preview'\
        \ availability from the published variant -->\r\n            <if cond=\"live\"\
        >\r\n              <hippo:configVariant variant=\"published\" availabilities=\"\
        live\"/>\r\n            <else/>\r\n              <hippo:configVariant variant=\"\
        published\" availabilities=\"\"/>\r\n            </if>\r\n          </if>\r\
        \n          <!-- copy the new or modified draft variant to the unpublished\
        \ variant, creating it if needed -->\r\n          <hippo:copyVariant sourceState=\"\
        draft\" targetState=\"unpublished\"/>\r\n          <!-- configure the new\
        \ or updated unpublished to be versionable, modified and available as 'preview'\
        \ -->\r\n          <hippo:configVariant variant=\"unpublished\" versionable=\"\
        true\" applyModified=\"true\" availabilities=\"preview\"/>\r\n        </if>\r\
        \n        <!-- return the possibly updated unpublished variant -->\r\n   \
        \     <hippo:result value=\"unpublished\"/>\r\n      </transition>\r\n\r\n\
        \      <!-- target-less transition to 'unlock' the current edited draft variant\
        \ by overriding its current holder\r\n           with that of the current\
        \ invoking admin (granted hippo:admin) user. -->\r\n      <transition event=\"\
        unlock\">\r\n        <hippo:setHolder holder=\"user\"/>\r\n      </transition>\r\
        \n\r\n    </state>\r\n\r\n    <!-- the composite request state is used to\
        \ manage all workflow operations on existing document workflow requests -->\r\
        \n    <state id=\"request\">\r\n\r\n      <!-- the initial no-request state\
        \ is used and active when there are no current document workflow requests\
        \ -->\r\n      <state id=\"no-request\">\r\n        <!-- event-less transition\
        \ to state \"requested\" when requests exists -->\r\n        <transition target=\"\
        requested\" cond=\"!empty(requests)\"/>\r\n      </state>\r\n\r\n      <!--\
        \ the requested state becomes active when document workflow requests are present\
        \ -->\r\n      <state id=\"requested\">\r\n        <onentry>\r\n         \
        \ <foreach item=\"request\" array=\"requests.values()\">\r\n            <!--\
        \ for all requests determine the available request actions and report them\
        \ through the special 'requests'\r\n                 feedback map variable\
        \ -->\r\n            <!-- for document workflow requests: -->\r\n        \
        \    <if cond=\"request.workflowRequest\">\r\n              <if cond=\"workflowContext.isGranted(request,\
        \ 'hippo:editor')\">\r\n                <!-- editor users (granted hippo:editor)\
        \ may reject and accept as well as cancel requests -->\r\n               \
        \ <if cond=\"request.workflowType!='rejected'\">\r\n                  <!--\
        \ if request not rejected yet, enable reject operation -->\r\n           \
        \       <hippo:requestAction identifierExpr=\"request.identity\" action=\"\
        rejectRequest\" enabledExpr=\"true\"/>\r\n                </if>\r\n      \
        \          <if cond=\"request.workflowType=='delete'\">\r\n              \
        \    <!-- if request for delete: enable accept operation if not live and not\
        \ editing -->\r\n                  <hippo:requestAction identifierExpr=\"\
        request.identity\" action=\"acceptRequest\" enabledExpr=\"!live and !editing\"\
        />\r\n                <elseif cond=\"request.workflowType=='publish'\">\r\n\
        \                  <!-- if request for publish: enable accept operation if\
        \ modified and not editing -->\r\n                  <hippo:requestAction identifierExpr=\"\
        request.identity\" action=\"acceptRequest\" enabledExpr=\"modified and !editing\"\
        />\r\n                </elseif>\r\n                <elseif cond=\"request.workflowType=='depublish'\"\
        />\r\n                  <!-- if request for depublish: enable accept operation\
        \ if live and not editing -->\r\n                  <hippo:requestAction identifierExpr=\"\
        request.identity\" action=\"acceptRequest\" enabledExpr=\"live and !editing\"\
        />\r\n                </if>\r\n                <if cond=\"!request.owner or\
        \ request.owner==user\">\r\n                  <!-- if request owner or no\
        \ request owner: enable cancel operation -->\r\n                  <hippo:requestAction\
        \ identifierExpr=\"request.identity\" action=\"cancelRequest\" enabledExpr=\"\
        true\"/>\r\n                </if>\r\n              <!-- when not an editor\
        \ user (not granted hippo:editor) then: -->\r\n              <elseif cond=\"\
        request?.owner==user\"/>\r\n                <!-- if request owner: enable\
        \ cancel operation -->\r\n                <hippo:requestAction identifierExpr=\"\
        request.identity\" action=\"cancelRequest\" enabledExpr=\"true\"/>\r\n   \
        \           </if>\r\n            <else/>\r\n              <!-- scheduled workflow\
        \ operation -->\r\n              <if cond=\"workflowContext.isGranted(request,\
        \ 'hippo:editor')\">\r\n                <!-- if editor user (granted hippo:editor):\
        \ enable cancel operation -->\r\n                <hippo:requestAction identifierExpr=\"\
        request.identity\" action=\"cancelRequest\" enabledExpr=\"true\"/>\r\n   \
        \           </if>\r\n            </if>\r\n          </foreach>\r\n       \
        \ </onentry>\r\n\r\n        <!-- target-less transition to 'accept' a specific\
        \ request -->\r\n        <transition event=\"acceptRequest\">\r\n\r\n    \
        \      <!-- define temporary request variable for the event payload request\
        \ parameter -->\r\n          <cs:var name=\"request\" expr=\"_event.data?.request\"\
        />\r\n          <!-- store the request workflow type as temporary variable\
        \ -->\r\n          <cs:var name=\"workflowType\" expr=\"request.workflowType\"\
        />\r\n          <!-- store the request targetDate as temporary variable -->\r\
        \n          <cs:var name=\"targetDate\" expr=\"request.scheduledDate\"/>\r\
        \n\r\n          <!-- First delete the request itself.\r\n               Note:\
        \ After this, the request object no longer can be accessed!\r\n          \
        \           Which is why we need to define the temporary variables workflowType\
        \ and targetDate above.\r\n          -->\r\n          <hippo:deleteRequest\
        \ requestExpr=\"request\"/>\r\n\r\n          <if cond=\"!targetDate\">\r\n\
        \            <!-- the request didn't have a targetDate defined, simply trigger\
        \ the \"workflowType\" value as event -->\r\n            <send event=\"workflowType\"\
        />\r\n            <!-- log the workflowType after it has been processed -->\r\
        \n            <send event=\"'logEvent.'+workflowType\"/>\r\n          <else/>\r\
        \n            <!-- the request did have a targetDate: trigger a 'scheduled'\
        \ workflow action event -->\r\n            <send event=\"workflowType\" namelist=\"\
        targetDate\"/>\r\n          </if>\r\n\r\n        </transition>\r\n\r\n   \
        \     <!-- target-less transition to 'reject' a request -->\r\n        <transition\
        \ event=\"rejectRequest\">\r\n          <!-- update the specific request to\
        \ type rejected with an optional reason, using the event payload\r\n     \
        \          'request' and optional 'reason' parameters -->\r\n          <hippo:rejectRequest\
        \ requestExpr=\"_event.data?.request\" reasonExpr=\"_event.data?.reason\"\
        />\r\n        </transition>\r\n\r\n        <!-- target-less transition to\
        \ 'cancel' a request -->\r\n        <transition event=\"cancelRequest\">\r\
        \n          <!-- delete the specific request using the event payload 'request'\
        \ parameter -->\r\n          <hippo:deleteRequest requestExpr=\"_event.data?.request\"\
        />\r\n        </transition>\r\n\r\n      </state>\r\n\r\n    </state>\r\n\r\
        \n    <!-- the composite publish state is used to manage workflow operations\
        \ for publishing a document -->\r\n    <state id=\"publish\">\r\n\r\n    \
        \  <!-- the initial no-publish state is used and active to indicate publish\
        \ operations are currently not\r\n           allowed or possible because the\
        \ document is being edited or not (yet) modified -->\r\n      <state id=\"\
        no-publish\">\r\n        <onentry>\r\n          <!-- by default report the\
        \ request publication operation as available but disabled -->\r\n        \
        \  <hippo:action action=\"requestPublication\" enabledExpr=\"false\"/>\r\n\
        \          <if cond=\"workflowContext.isGranted(unpublished ?: published ?:\
        \ draft, 'hippo:editor')\">\r\n              <!-- if editor user (granted\
        \ hippo:editor) by default report the publish operation as available but disabled\
        \ -->\r\n              <hippo:action action=\"publish\" enabledExpr=\"false\"\
        />\r\n          </if>\r\n        </onentry>\r\n        <!-- event-less transition\
        \ to publishable state if not currently editing and the document is modified\
        \ -->\r\n        <transition target=\"publishable\" cond=\"!editing and modified\"\
        />\r\n      </state>\r\n\r\n      <!-- state publishable is active when the\
        \  document is modified and not currently edited -->\r\n      <state id=\"\
        publishable\">\r\n        <onentry>\r\n          <if cond=\"!requestPending\
        \ or user=='workflowuser'\">\r\n            <!-- if no request pending OR\
        \ invoked by the 'workflowuser' user (scheduled workflow jobs daemon):\r\n\
        \                 enable request publication operation -->\r\n           \
        \ <hippo:action action=\"requestPublication\" enabledExpr=\"true\"/>\r\n \
        \           <if cond=\"workflowContext.isGranted(unpublished, 'hippo:editor')\"\
        >\r\n              <!-- if (also) editor user (granted hippo:editor): enable\
        \ publish operation -->\r\n              <hippo:action action=\"publish\"\
        \ enabledExpr=\"true\"/>\r\n            </if>\r\n          </if>\r\n     \
        \   </onentry>\r\n\r\n        <!-- target-less transition to create a publish\
        \ request when no event payload parameter targetDate is provided -->\r\n \
        \       <transition event=\"requestPublication\" cond=\"!_event.data?.targetDate\"\
        >\r\n          <hippo:workflowRequest type=\"publish\" contextVariantExpr=\"\
        unpublished\"/>\r\n        </transition>\r\n\r\n        <!-- target-less transition\
        \ to create a scheduledpublish request at the required event payload parameter\
        \ targetDate -->\r\n        <transition event=\"requestPublication\" cond=\"\
        !!_event.data?.targetDate\">\r\n          <hippo:workflowRequest type=\"scheduledpublish\"\
        \ contextVariantExpr=\"unpublished\" targetDateExpr=\"_event.data?.targetDate\"\
        />\r\n        </transition>\r\n\r\n        <!-- target-less transition to\
        \ publish the document when no event payload parameter targetDate is provided\
        \ -->\r\n        <transition event=\"publish\" cond=\"!_event.data?.targetDate\"\
        >\r\n          <!-- copy the content of the unpublished variant to the published\
        \ variant -->\r\n          <hippo:copyVariant sourceState=\"unpublished\"\
        \ targetState=\"published\"/>\r\n          <!-- mark the published variant\
        \ as published and set its availability to (only) 'live' -->\r\n         \
        \ <hippo:configVariant variant=\"published\" applyPublished=\"true\" availabilities=\"\
        live\"/>\r\n          <!-- create a JCR version of the published document\
        \ via the unpublished variant -->\r\n          <hippo:version variant=\"unpublished\"\
        />\r\n        </transition>\r\n\r\n        <!-- target-less transition to\
        \ schedule the publication of the document at the required event payload parameter\
        \ targetDate -->\r\n        <transition event=\"publish\" cond=\"!!_event.data?.targetDate\"\
        >\r\n          <hippo:scheduleWorkflow type=\"publish\" targetDateExpr=\"\
        _event.data?.targetDate\"/>\r\n        </transition>\r\n\r\n      </state>\r\
        \n\r\n    </state>\r\n\r\n    <!-- the composite depublish state is used to\
        \ manage workflow operations for depublishing a document -->\r\n    <state\
        \ id=\"depublish\">\r\n\r\n      <!-- the initial no-depublish state is used\
        \ and active to indicate depublish operations are currently not\r\n      \
        \     allowed or possible because the document is being edited or not 'live'\
        \ -->\r\n      <state id=\"no-depublish\">\r\n        <onentry>\r\n      \
        \    <!-- by default report the request depublication operation as available\
        \ but disabled -->\r\n          <hippo:action action=\"requestDepublication\"\
        \ enabledExpr=\"false\"/>\r\n          <if cond=\"workflowContext.isGranted(published\
        \ ?: unpublished ?: draft, 'hippo:editor')\">\r\n            <!-- if editor\
        \ user (granted hippo:editor) by default report the depublish operation as\
        \ available but disabled -->\r\n            <hippo:action action=\"depublish\"\
        \ enabledExpr=\"false\"/>\r\n          </if>\r\n        </onentry>\r\n   \
        \     <!-- event-less transition to depublishable state if not currently editing\
        \ and the document is 'live' -->\r\n        <transition target=\"depublishable\"\
        \ cond=\"!editing and live\"/>\r\n      </state>\r\n\r\n      <!-- state depublishable\
        \ is active when the  document is live and not currently edited -->\r\n  \
        \    <state id=\"depublishable\">\r\n        <onentry>\r\n          <if cond=\"\
        !requestPending or user=='workflowuser'\">\r\n            <!-- if no request\
        \ pending OR invoked by the 'workflowuser' user (scheduled workflow jobs daemon):\r\
        \n                 enable request depublication operation -->\r\n        \
        \    <hippo:action action=\"requestDepublication\" enabledExpr=\"true\"/>\r\
        \n            <if cond=\"workflowContext.isGranted(published, 'hippo:editor')\"\
        >\r\n              <!-- if (also) editor user (granted hippo:editor): enable\
        \ publish operation -->\r\n              <hippo:action action=\"depublish\"\
        \ enabledExpr=\"true\"/>\r\n            </if>\r\n          </if>\r\n     \
        \   </onentry>\r\n\r\n        <!-- target-less transition to create a depublish\
        \ request when no event payload parameter targetDate is provided -->\r\n \
        \       <transition event=\"requestDepublication\" cond=\"!_event.data?.targetDate\"\
        >\r\n          <hippo:workflowRequest type=\"depublish\" contextVariantExpr=\"\
        published\"/>\r\n        </transition>\r\n\r\n        <!-- target-less transition\
        \ to create a scheduleddepublish request at the required event payload parameter\
        \ targetDate -->\r\n        <transition event=\"requestDepublication\" cond=\"\
        !!_event.data?.targetDate\">\r\n          <hippo:workflowRequest type=\"scheduleddepublish\"\
        \ contextVariantExpr=\"published\" targetDateExpr=\"_event.data?.targetDate\"\
        />\r\n        </transition>\r\n\r\n        <!-- target-less transition to\
        \ depublish the document when no event payload parameter targetDate is provided\
        \ -->\r\n        <transition event=\"depublish\" cond=\"!_event.data?.targetDate\"\
        >\r\n          <if cond=\"!unpublished\">\r\n            <!-- if no unpublished\
        \ variant exists yet, copy it from the published variant -->\r\n         \
        \   <hippo:copyVariant sourceState=\"published\" targetState=\"unpublished\"\
        />\r\n          </if>\r\n          <!-- ensure the unpublished variant to\
        \ be versionable set its availability to (only) 'live' -->\r\n          <hippo:configVariant\
        \ variant=\"unpublished\" versionable=\"true\" availabilities=\"preview\"\
        />\r\n          <!-- remove all availabilities from the published variant\
        \ -->\r\n          <hippo:configVariant variant=\"published\" availabilities=\"\
        \"/>\r\n          <!-- create an extra version of the current unpublished\
        \ (possibly modified?) -->\r\n          <hippo:version variant=\"unpublished\"\
        />\r\n        </transition>\r\n\r\n        <!-- target-less transition to\
        \ schedule the depublication of the document at the required event payload\
        \ parameter targetDate -->\r\n        <transition event=\"depublish\" cond=\"\
        !!_event.data?.targetDate\">\r\n          <hippo:scheduleWorkflow type=\"\
        depublish\" targetDateExpr=\"_event.data?.targetDate\"/>\r\n        </transition>\r\
        \n\r\n      </state>\r\n\r\n    </state>\r\n\r\n    <!-- the composite versioning\
        \ state is used to manage versioning related workflow operations of a document\
        \ -->\r\n    <state id=\"versioning\">\r\n\r\n      <onentry>\r\n        <!--\
        \ always enable the listVersions, even if no version is available (yet) -->\r\
        \n        <hippo:action action=\"listVersions\" enabledExpr=\"true\"/>\r\n\
        \      </onentry>\r\n\r\n      <!-- target-less transition to report a list\
        \ of available versions of the document -->\r\n      <transition event=\"\
        listVersions\">\r\n        <hippo:listVersions variant=\"unpublished\" />\r\
        \n      </transition>\r\n\r\n      <!-- the initial no-versioning state is\
        \ used and active to indicate versioning operations are currently not\r\n\
        \           allowed or possible because there is no unpublished document variant\
        \ yet -->\r\n      <state id=\"no-versioning\">\r\n        <!-- event-less\
        \ transition to versionable state when an unpublished document variant exists\
        \ -->\r\n        <transition target=\"versionable\" cond=\"!!unpublished\"\
        />\r\n      </state>\r\n\r\n      <!-- the versionable state becomes active\
        \ when an unpublished document variant exists -->\r\n      <state id=\"versionable\"\
        >\r\n        <onentry>\r\n          <!-- enable the retrieveVersion operation\
        \ -->\r\n          <hippo:action action=\"retrieveVersion\" enabledExpr=\"\
        true\"/>\r\n          <if cond=\"workflowContext.isGranted(unpublished, 'hippo:editor')\"\
        >\r\n            <!-- if the user is editor (granted hippo:editor) also enable\
        \ the other versioning operations -->\r\n            <hippo:action action=\"\
        version\" enabledExpr=\"true\"/>\r\n            <hippo:action action=\"restoreVersion\"\
        \ enabledExpr=\"true\"/>\r\n            <hippo:action action=\"versionRestoreTo\"\
        \ enabledExpr=\"true\"/>\r\n          </if>\r\n        </onentry>\r\n\r\n\
        \        <!-- target-less transition to create a new version for the current\
        \ unpublished variant -->\r\n        <transition event=\"version\">\r\n  \
        \        <hippo:version variant=\"unpublished\"  />\r\n        </transition>\r\
        \n\r\n        <!-- target-less transition to retrieve a specific version created\
        \ on the event payload provided date parameter -->\r\n        <transition\
        \ event=\"retrieveVersion\">\r\n          <hippo:retrieveVersion historic=\"\
        _event.data?.date\" variant=\"unpublished\" />\r\n        </transition>\r\n\
        \r\n        <!-- target-less transition to restore a specific version from\
        \ the event payload provided parameter date to the\r\n             payload\
        \ provided parameter target (document).\r\n             Note: this uses custom/manual\
        \ copying of the version contents, unlike the restoreVersion operation below\
        \ -->\r\n        <transition event=\"versionRestoreTo\">\r\n          <hippo:versionRestoreTo\
        \ historic=\"_event.data?.date\" variant=\"unpublished\" target=\"_event.data?.target\"\
        />\r\n        </transition>\r\n\r\n        <!-- target-less transition to\
        \ restore a specific document version from the event payload provided parameter\
        \ date.\r\n             Note: this uses standard JCR version restore unlike\
        \ the versionRestoreTo operation above -->\r\n        <transition event=\"\
        restoreVersion\">\r\n          <hippo:restoreVersion historic=\"_event.data?.date\"\
        \  variant=\"unpublished\" />\r\n        </transition>\r\n\r\n      </state>\r\
        \n\r\n    </state>\r\n\r\n    <!-- the composite terminate state is used to\
        \ manage termination and related/similar workflow operations like\r\n    \
        \     move and rename -->\r\n    <state id=\"terminate\">\r\n\r\n      <!--\
        \ the initial no-terminate state is used and active when delete/move/rename\
        \ operations are currently now\r\n           allowed or possible -->\r\n \
        \     <state id=\"no-terminate\">\r\n        <onentry>\r\n          <!-- report\
        \ request delete operation as available but default disabled -->\r\n     \
        \     <hippo:action action=\"requestDelete\" enabledExpr=\"false\"/>\r\n \
        \         <if cond=\"workflowContext.isGranted(deleteSource, 'hippo:editor')\
        \ and workflowContext.isGranted(containingFolder, 'jcr:write')\">\r\n    \
        \        <!-- if the user is editor (granted hippo:editor) AND allowed to\
        \ modify (jcr:write) the document folder,\r\n                 report the delete/move/rename\
        \ operations as available but default disabled -->\r\n            <hippo:action\
        \ action=\"delete\" enabledExpr=\"false\"/>\r\n            <hippo:action action=\"\
        move\" enabledExpr=\"false\"/>\r\n            <hippo:action action=\"rename\"\
        \ enabledExpr=\"false\"/>\r\n          </if>\r\n        </onentry>\r\n   \
        \     <!-- event-less transition to terminatable state if the document is\
        \ not live and not being edited -->\r\n        <transition target=\"terminateable\"\
        \ cond=\"!live and !editing\"/>\r\n      </state>\r\n\r\n      <!-- the terminateable\
        \ state becomes active when the document is not live and not being edited\
        \ -->\r\n      <state id=\"terminateable\">\r\n        <onentry>\r\n     \
        \     <if cond=\"!requestPending\">\r\n            <!-- delete operations\
        \ are only allowed when (also) no request is pending -->\r\n            <!--\
        \ (then) always enable the request delete operation -->\r\n            <hippo:action\
        \ action=\"requestDelete\" enabledExpr=\"true\"/>\r\n            <if cond=\"\
        workflowContext.isGranted(deleteSource, 'hippo:editor') and workflowContext.isGranted(containingFolder,\
        \ 'jcr:write')\">\r\n              <!-- if the user is editor (granted hippo:editor)\
        \ AND allowed to modify (jcr:write) the document folder,\r\n             \
        \      enable the delete/move/rename operations -->\r\n              <hippo:action\
        \ action=\"delete\" enabledExpr=\"true\"/>\r\n              <hippo:action\
        \ action=\"move\" enabledExpr=\"true\"/>\r\n              <hippo:action action=\"\
        rename\" enabledExpr=\"true\"/>\r\n            </if>\r\n          </if>\r\n\
        \        </onentry>\r\n\r\n        <!-- target-less transition to create a\
        \ delete request -->\r\n        <transition event=\"requestDelete\">\r\n \
        \         <hippo:workflowRequest type=\"delete\" contextVariantExpr=\"deleteSource\"\
        />\r\n        </transition>\r\n\r\n        <!-- transition to delete the current\
        \ document and go to final state terminated -->\r\n        <transition event=\"\
        delete\" target=\"terminated\">\r\n          <hippo:archiveDocument/>\r\n\
        \        </transition>\r\n\r\n        <!-- transition to move the current\
        \ document and go to final state terminated -->\r\n        <transition event=\"\
        move\" target=\"terminated\">\r\n          <hippo:moveDocument destinationExpr=\"\
        _event.data?.destination\" newNameExpr=\"_event.data?.name\"/>\r\n       \
        \ </transition>\r\n\r\n        <!-- transition to rename the current document\
        \ and go to final state terminated -->\r\n        <transition event=\"rename\"\
        \ target=\"terminated\">\r\n          <hippo:renameDocument newNameExpr=\"\
        _event.data?.name\"/>\r\n        </transition>\r\n\r\n      </state>\r\n\r\
        \n    </state>\r\n\r\n    <!-- the composite copy state is used to manage\
        \ the copy workflow operation -->\r\n    <state id=\"copy\">\r\n\r\n     \
        \ <!-- the initial no-copy state is used and active when the user is not an\
        \ editor (granted hippo:editor) -->\r\n      <state id=\"no-copy\">\r\n  \
        \      <!-- event-less transition to copyable state when the user is an editor\
        \ (granted hippo:editor) -->\r\n        <transition target=\"copyable\" cond=\"\
        workflowContext.isGranted(copySource,'hippo:editor')\"/>\r\n      </state>\r\
        \n\r\n      <!-- the state copyable is only active for users which are editor\
        \ (granted hippo:editor) -->\r\n      <state id=\"copyable\">\r\n        <onentry>\r\
        \n          <!-- always enable the copy operation -->\r\n          <hippo:action\
        \ action=\"copy\" enabledExpr=\"true\"/>\r\n        </onentry>\r\n\r\n   \
        \     <!-- target-less transition to copy the document to the event payload\
        \ provided parameters destination and name -->\r\n        <transition event=\"\
        copy\">\r\n          <hippo:copyDocument destinationExpr=\"_event.data?.destination\"\
        \ newNameExpr=\"_event.data?.name\"/>\r\n        </transition>\r\n\r\n   \
        \   </state>\r\n\r\n    </state>\r\n\r\n    <!-- the simple and non-transitional\
        \ logEvent state is used to log actions:\r\n         such actions needs to\
        \ be 'send' using an event name prefixed by 'logEvent.'\r\n         the remainder\
        \ of the event name will be logged as event action\r\n    -->\r\n    <state\
        \ id=\"logEvent\">\r\n      <transition event=\"logEvent.*\">\r\n        <hippo:logEvent\
        \ actionexpr=\"_event.name.substring('logEvent.'.length())\" />\r\n      </transition>\r\
        \n    </state>\r\n\r\n  </parallel>\r\n\r\n  <!-- the final terminated state\
        \ is used when the document no longer exists, is renamed or moved -->\r\n\
        \  <final id=\"terminated\" />\r\n\r\n</scxml>"
