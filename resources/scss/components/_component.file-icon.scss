/*------------------------------------*\
    FILE ICON
\*------------------------------------*/
$color__icon--default: $color__grey--text;

$color__icon--img: $color__icon--default;
$color__icon--doc: $color__blue--base;
$color__icon--pdf: $color__icon--default;
$color__icon--xls: $color__green--base;
$color__icon--ppt: $color__orange--base;
$color__icon--txt: $color__icon--default;
$color__icon--xml: $color__icon--default;
$color__icon--csv: $color__icon--default;
$color__icon--odt: $color__icon--default;
$color__icon--ods: $color__icon--default;
$color__icon--odp: $color__icon--default;
$color__icon--kml: $color__icon--default;

$filetypegroups: (
  (gif png jpg jpeg) image,
  (doc docx) word,
  (pdf) pdf,
  (xls xlsx xlsm) excel,
  (ppt pptx pps ppsx) ppt,
  (rtf) rtf,
  (txt) txt,
  (xml, xsd) xml,
  (csv) csv,
  (kml, kmz) geo
) !default;

$includeretina: true !default;

// Dev note: this generates some extraneous code and it would be nice to optimize it.
//
// 1) It currently generates separate definitions for each file extension but it would be good to consolidate in groups
//    pseudocode i.e.
//      .ppt, .pptx, .pps, .ppsx {background-image: url(ppt.png)}
//
// 2) It generates media queries for every item but it would be nice to go through all at a given size then mq them
//    pseudocode i.e.
//      [all icon definitions]
//
//      @include media-query(retina) {
//        [all retina icon definitions]
//      }

@mixin icon-files($sizex, $sizey) {
  background: url('../images/icons/documents/gen_#{$sizex}px.png') no-repeat center center $color__white;
  @if $includeretina {
    @include image-2x('../images/icons/documents/gen_#{$sizex}px_@2x.png', #{$sizex}px, #{$sizey}px);
  }

  @each $filetypegroup in $filetypegroups {
    @each $extension in nth($filetypegroup, 1) {
      &.file-icon--#{to-upper-case($extension)} {
        background-image: url('../images/icons/documents/#{$extension}_#{$sizex}px.png');

        @if $includeretina {
          @include image-2x('../images/icons/documents/#{$extension}_#{$sizex}px_@2x.png', #{$sizex}px, #{$sizey}px);
        }
      }
    }
  }
}

.file-icon {
  $file-icon-width: 34px;
  $file-icon-height: $file-icon-width * 1.441;

  border: 1px solid $color__grey--base;
  display: block;
  margin-top: 4px;
  position: relative;

  width: $file-icon-width;
  height: $file-icon-height;

  &:before {
    border-top: 9px solid $color__white;
    border-left: 9px solid $color__grey--base;
    content: '';
    position: absolute;
    right: -1px;
    top: -1px;
  }

  @include icon-files(34, 48);

  // size variants
  &--medium {
    $file-icon-large-width: 100%;
    $file-icon-large-height: $file-icon-large-width * 1.441;

    padding-bottom: $file-icon-large-height;
    width: $file-icon-large-width;

    &:before {
      border-top-width: 32px;
      border-left-width: 32px;
    }

    @include icon-files(107, 152);
  }

  &--large {
    $file-icon-large-width: 100%;
    $file-icon-large-height: $file-icon-large-width * 1.441;

    padding-bottom: $file-icon-large-height;
    width: $file-icon-large-width;

    &:before {
      border-top-width: 49px;
      border-left-width: 49px;
    }

    @include icon-files(165, 235);
  }
}

// hover and active states for icon links
a.file-icon {
  @include transition(background-color $transition-out-time);

  &:hover {
    background-color: $color__grey--lighter;

    @include transition-duration($transition-in-time);
  }

  &:active {
    background-color: $color__blue--lighter;
    outline: none;

    @include transition(none);
  }
}

// component-specific variants
.publication-info__body .file-icon {
  &:before {
    border-top-color: $color__grey--lighter;
  }
}